{"version":3,"sources":["App/Container/styled.js","App/Container/index.js","App/Header/styled.js","App/Header/index.js","App/Form/Label/styled.js","App/Form/Label/index.js","App/Form/Select/styled.js","App/Form/Select/index.js","App/Form/Amount/styled.js","App/Form/Amount/index.js","App/Form/Button/styled.js","App/Form/Button/index.js","App/Form/Clock/styled.js","App/Form/Clock/index.js","App/CurrenciesRates/index.js","App/Form/styled.js","App/Form/index.js","App/Form/useRate.js","App/Result/styled.js","App/Result/index.js","App/Footer/styled.js","App/Footer/index.js","App/App.js","App/useCurrenciesData.js","serviceWorker.js","index.js"],"names":["Wrapper","styled","main","Container","children","HeaderWrapper","header","HeaderTitle","h1","Header","mainTitle","LabelContainer","label","Label","title","inputName","htmlFor","SelectContainer","select","first","css","Select","currenciesRates","selectName","modifierClass","stateValue","onChange","id","value","required","map","currencyRate","key","fullName","Input","input","Amount","type","min","step","Exchange","button","Button","ClockContainer","p","Clock","useState","Date","newDate","setNewDate","useEffect","intervalId","setInterval","clearInterval","toLocaleString","undefined","weekday","hour","minute","second","day","month","year","rate","FormWrapper","form","Fieldset","fieldset","Legend","legend","Flexbox","Form","exchangeCurrency","writeResultsContent","fromCurrencyName","setFromCurrencyName","toCurrencyName","setToCurrencyName","amountValue","setAmountValue","fromCurrency","find","toCurrency","toFixed","useRate","onSubmit","event","preventDefault","target","ResultWrapper","section","ResultHeader","h2","ResultContent","span","Result","resultContainer","resultValue","console","log","FooterWrapper","footer","FooterLink","a","Footer","href","rel","App","setResultValue","setResultContainer","currentRate","useCurrenciesData","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.82098536.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.main`\r\n    max-width: 800px;\r\n    margin: 20px auto;\r\n    display: grid;\r\n    grid-template-rows: 100px 1fr 100px 80px;\r\n    grid-gap: 20px;\r\n\r\n    @media(max-width:670px) {\r\n        margin: 20px auto;\r\n        grid-template-rows: 200px 1fr 100px 130px;\r\n    }\r\n`;","import React from \"react\";\r\nimport {Wrapper} from \"./styled\";\r\n\r\nconst Container = ({ children }) => (\r\n  <Wrapper>\r\n    {children}\r\n  </Wrapper>\r\n);\r\n\r\nexport default Container;","import styled from \"styled-components\";\r\n\r\nexport const HeaderWrapper = styled.header`\r\n    padding: 10px;\r\n    width: 100%;\r\n    color:black;\r\n    background-color: teal;\r\n    display:flex;\r\n    flex-flow: row wrap;\r\n    justify-content: center;\r\n    align-items: center;\r\n`;\r\n\r\nexport const HeaderTitle = styled.h1`\r\n    font-weight: 800;\r\n    font-size: 35px;\r\n`;","import React from \"react\";\r\nimport {HeaderWrapper, HeaderTitle} from \"./styled\";\r\n\r\nconst Header = ({ mainTitle }) => (\r\n  <HeaderWrapper>\r\n    <HeaderTitle>{mainTitle}</HeaderTitle>\r\n  </HeaderWrapper>\r\n)\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const LabelContainer = styled.label`\r\n    background-color: teal;\r\n    padding: 10px;\r\n    font-weight: 800;\r\n\r\n    @media(max-width:530px) {\r\n        width: 100%;\r\n        margin-left: 0px;\r\n    }\r\n`;","import React from \"react\";\r\nimport {LabelContainer} from \"./styled\";\r\n\r\nconst Label = ({ title, inputName }) => (\r\n  <LabelContainer htmlFor={inputName}>{title}</LabelContainer>\r\n);\r\n\r\nexport default Label;","import styled, { css } from \"styled-components\";\r\n\r\nexport const SelectContainer = styled.select`\r\n    margin-left: 89px;\r\n    padding: 10px;\r\n    width: 200px;\r\n    border: 2px solid teal;\r\n\r\n    ${({ first }) => first && css`\r\n        margin-left: 67px;\r\n    `}\r\n\r\n    @media(max-width:530px) {\r\n        width: 100%;\r\n        margin-top: 10px;\r\n        margin-left: 0px;\r\n    }\r\n`;","import React from \"react\";\r\nimport { SelectContainer } from \"./styled\";\r\n\r\nconst Select = ({ currenciesRates, modifierClass, selectName, stateValue, onChange, first }) => (\r\n\r\n  <SelectContainer\r\n    first={first}\r\n    id={selectName}\r\n    value={stateValue}\r\n    onChange={onChange}\r\n    required\r\n\r\n  >\r\n    {\r\n      currenciesRates.map(currencyRate => (\r\n        <option key={currencyRate.id} value={currencyRate.id}>{currencyRate.fullName}</option>\r\n      ))\r\n    }\r\n  </SelectContainer>\r\n\r\n);\r\n\r\nexport default Select;","import styled from \"styled-components\";\r\n\r\nexport const Input = styled.input`\r\n    margin-left: 30px;\r\n    padding: 10px;\r\n    width: 200px;\r\n    border: 2px solid teal;\r\n\r\n    @media(max-width:530px) {\r\n        width: 100%;\r\n        margin-top: 10px;\r\n        margin-left: 0px;\r\n    }\r\n`;","import React from \"react\";\r\nimport { Input } from \"./styled\";\r\n\r\nconst Amount = ({ stateValue, onChange }) => (\r\n  <Input\r\n    type=\"number\"\r\n    id=\"amount\"\r\n    min=\"1\"\r\n    step=\"0.01\"\r\n    value={stateValue}\r\n    onChange={onChange}\r\n    required\r\n  />\r\n);\r\n\r\nexport default Amount;\r\n\r\n","import styled from \"styled-components\";\r\n\r\nexport const Exchange = styled.button`\r\n    font-weight: 800;\r\n    padding: 10px;\r\n    width: 410px;\r\n    border: 3px solid teal;\r\n    background-color: hsl(180, 100%, 33%);\r\n\r\n    &:hover{\r\n        background-color: hsl(180, 100%, 36%);\r\n        border: 3px solid black;\r\n        cursor: pointer;\r\n    }\r\n\r\n    @media(max-width:530px) {\r\n        width: 100%;\r\n    }\r\n`;\r\n","import React from \"react\";\r\nimport { Exchange } from \"./styled\";\r\n\r\nconst Button = () => (\r\n  <Exchange>Exchange!</Exchange>\r\n);\r\n\r\nexport default Button;","import styled from \"styled-components\";\r\n\r\nexport const ClockContainer = styled.p`\r\n    text-align: right;\r\n    font-family: monospace;\r\n`;","import React, { useState, useEffect } from \"react\";\r\nimport {ClockContainer} from \"./styled\";\r\n\r\nconst Clock = () => {\r\n    const [newDate, setNewDate] = useState(new Date());\r\n\r\n    useEffect(() => {\r\n        const intervalId =\r\n            setInterval(\r\n                () => {\r\n                    setNewDate(new Date());\r\n                }, 1000);\r\n        return () => {\r\n            clearInterval(intervalId)\r\n        }\r\n    }, []);\r\n\r\n    const setDateString = (date) => {\r\n       return (date.toLocaleString(undefined, {\r\n            weekday: \"long\",\r\n            hour: \"2-digit\",\r\n            minute: \"2-digit\",\r\n            second: \"2-digit\",\r\n            day: \"numeric\",\r\n            month: \"long\",\r\n            year:\"numeric\"\r\n        }));\r\n    };\r\n\r\n\r\n    return (\r\n        <ClockContainer>Dzisiaj jest {setDateString(newDate)}  </ClockContainer>\r\n    )\r\n};\r\n\r\nexport default Clock;","export const currenciesRates = [\r\n    {\r\n        id: \"EUR\",\r\n        fullName: \"Euro\",\r\n        rate: 4.4573\r\n    },\r\n    {\r\n        id: \"GBP\",\r\n        fullName: \"Pound sterling\",\r\n        rate: 4.9328\r\n    },\r\n    {\r\n        id: \"USD\",\r\n        fullName: \"US Dollar\",\r\n        rate: 3.9741\r\n    },\r\n    {\r\n        id: \"CHF\",\r\n        fullName: \"Swiss franc\",\r\n        rate: 4.1811\r\n    },\r\n    {\r\n        id: \"PLN\",\r\n        fullName: \"Polish złoty\",\r\n        rate: 1.0\r\n    }\r\n];\r\n\r\n","import styled from \"styled-components\";\r\n\r\nexport const FormWrapper = styled.form`\r\n    text-align: center;\r\n`;\r\n\r\nexport const Fieldset = styled.fieldset`\r\n    padding: 30px;\r\n    border: 2px solid teal;\r\n    background-color: #eee;\r\n`;\r\n\r\nexport const Legend = styled.legend`\r\n    background-color: teal;\r\n    padding: 10px;\r\n    font-weight: 800;\r\n`;\r\n\r\nexport const Flexbox = styled.p`\r\n    @media(max-width:530px) {\r\n        display: flex;\r\n        flex-flow: column;\r\n    }\r\n`;\r\n\r\n","import React, { useState } from \"react\";\r\nimport Label from \"./Label\";\r\nimport Select from \"./Select\";\r\nimport Amount from \"./Amount\";\r\nimport Button from \"./Button\";\r\nimport Clock from \"./Clock\";\r\nimport { currenciesRates } from \"../CurrenciesRates/index.js\";\r\nimport {useRate} from \"./useRate\";\r\nimport { FormWrapper, Fieldset, Legend, Flexbox } from \"./styled\";\r\n\r\nconst Form = ({\r\n  exchangeCurrency,\r\n  writeResultsContent }) => {\r\n  const [fromCurrencyName, setFromCurrencyName] = useState(\"EUR\");\r\n  const [toCurrencyName, setToCurrencyName] = useState(\"PLN\");\r\n  const [amountValue, setAmountValue] = useState(\"\");\r\n  const rate = useRate(fromCurrencyName, toCurrencyName)\r\n\r\n  const onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n    exchangeCurrency(rate, amountValue);\r\n    writeResultsContent(amountValue, fromCurrencyName, toCurrencyName)\r\n    setAmountValue(\"\");\r\n  };\r\n\r\n  return (\r\n    <FormWrapper onSubmit={onFormSubmit} >\r\n      <Fieldset>\r\n        <Legend>Currency coverter input data</Legend>\r\n        <Clock />\r\n        <Flexbox>\r\n          <Label\r\n            title=\"From currency:\"\r\n            inputName=\"fromCurrency\"\r\n          />\r\n          <Select\r\n            first\r\n            selectName=\"fromCurrency\"\r\n            stateValue={fromCurrencyName}\r\n            onChange={({ target }) => setFromCurrencyName(target.value)}\r\n            currenciesRates={currenciesRates}\r\n          />\r\n        </Flexbox>\r\n        <Flexbox>\r\n          <Label\r\n            title=\"To currency:\"\r\n            inputName=\"toCurrency\"\r\n          />\r\n          <Select\r\n            selectName=\"toCurrency\"\r\n            stateValue={toCurrencyName}\r\n            onChange={({ target }) => setToCurrencyName(target.value)}\r\n            currenciesRates={currenciesRates}\r\n          />\r\n\r\n        </Flexbox>\r\n        <Flexbox>\r\n          <Label\r\n            title=\"Amount to convert:\"\r\n            inputName=\"amount\"\r\n          />\r\n          <Amount\r\n            stateValue={amountValue}\r\n            onChange={({ target }) => setAmountValue(target.value)}\r\n          />\r\n        </Flexbox>\r\n        <Button />\r\n      </Fieldset>\r\n    </FormWrapper>\r\n  )\r\n};\r\n\r\nexport default Form;\r\n","import {currenciesRates} from \"../CurrenciesRates\";\r\n\r\nexport const useRate = (fromCurrencyName, toCurrencyName) => {\r\n    const fromCurrency = currenciesRates.find(({ id }) => id === fromCurrencyName);\r\n    const toCurrency = currenciesRates.find(({ id }) => id === toCurrencyName);\r\n    const currentRate = (fromCurrency.rate / toCurrency.rate).toFixed(2);\r\n\r\n    return currentRate;\r\n};","import styled from \"styled-components\";\r\n\r\nexport const ResultWrapper = styled.section`\r\n    display:flex;\r\n    flex-flow:row wrap;\r\n    padding: 10px;\r\n    max-width: 800px;\r\n    background-color: teal;\r\n    font-weight: 800;\r\n`;\r\n\r\nexport const ResultHeader = styled.h2`\r\n    font-size: 24px;\r\n`;\r\n\r\nexport const ResultContent = styled.span`\r\n    max-width:800px;\r\n    margin-left:5px;\r\n    text-decoration: underline;\r\n`;","import React from \"react\";\r\nimport {ResultWrapper, ResultHeader, ResultContent} from \"./styled\";\r\n\r\nconst Result = ({resultContainer,resultValue }) => {\r\n  console.log(resultValue)\r\n  return (\r\n    <ResultWrapper>\r\n      <ResultHeader>Here you see result:\r\n        <ResultContent>\r\n          {resultContainer.amountValue} {resultContainer.fromCurrencyName}\r\n          {resultValue !== \"\" ? \" = \" : \" \"}\r\n          {resultValue} {resultContainer.toCurrencyName}\r\n        </ResultContent>\r\n      </ResultHeader>\r\n    </ResultWrapper>\r\n  )\r\n};\r\n\r\nexport default Result;","import styled from \"styled-components\";\r\n\r\nexport const FooterWrapper = styled.footer`\r\n    background-color: #eee;\r\n    max-width: 100%;\r\n    color: black;\r\n    padding: 10px;\r\n    text-align: center;\r\n    border: 2px solid teal;\r\n`;\r\n\r\nexport const FooterLink = styled.a`\r\n    color: black;\r\n    text-decoration: none;\r\n\r\n    &:hover{\r\n        color: teal;\r\n    }\r\n`;","import React from \"react\";\r\nimport {FooterWrapper, FooterLink} from \"./styled\";\r\n\r\nconst Footer = () => (\r\n  <FooterWrapper>Currency Converter by Michał Janiec &copy; All right reserved 2020.\r\n    <p>Icon made by [turkkub] from\r\n      <FooterLink\r\n        href=\"https://www.flaticon.com/authors/freepik\"\r\n        target=\"_blank\"\r\n        rel=\"noreferrer noopener\"\r\n      >\r\n        {\" \"}www.flaticon.com\r\n      </FooterLink>\r\n    </p>\r\n  </FooterWrapper>\r\n)\r\n\r\nexport default Footer;","import React from 'react';\nimport Container from \"./Container\";\nimport Header from \"./Header\";\nimport Form from \"./Form\";\nimport Result from \"./Result\";\nimport Footer from \"./Footer\";\nimport { currenciesRates } from \"./CurrenciesRates/index.js\";\nimport {useCurrenciesData} from \"./useCurrenciesData\";\n\nfunction App() {\n  const [exchangeCurrency,\n    writeResultsContent,\n    resultContainer,\n    resultValue] = useCurrenciesData();\n\n\n  return (\n    <Container>\n      <Header mainTitle=\"Currency Converter by {Imperator}\" />\n      <Form\n        exchangeCurrency={exchangeCurrency}\n        currenciesRates={currenciesRates}\n        writeResultsContent={writeResultsContent}\n      />\n      <Result\n        resultContainer={resultContainer}\n        resultValue={resultValue}\n      />\n      <Footer />\n    </Container>\n  );\n};\n\nexport default App;\n","import {useState} from \"react\";\r\n\r\nexport const useCurrenciesData = () => {\r\n    const [resultValue, setResultValue] = useState(\"\");\r\n    const [resultContainer, setResultContainer] = useState(\"\")\r\n  \r\n    const exchangeCurrency = (currentRate, amountValue) => {\r\n      setResultValue(resultValue => (amountValue * currentRate).toFixed(0))\r\n    };\r\n  \r\n    const writeResultsContent = (amountValue, fromCurrencyName, toCurrencyName) => {\r\n      setResultContainer({\r\n        amountValue,\r\n        fromCurrencyName,\r\n        toCurrencyName\r\n      })\r\n    };\r\n  \r\n    return [exchangeCurrency,\r\n      writeResultsContent,\r\n      resultContainer,\r\n      resultValue\r\n    ]\r\n  };","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}